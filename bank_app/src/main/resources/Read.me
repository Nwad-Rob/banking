The goal is to create a banking application that can do certain features

-Admin: Can open and manage multiple accounts
-Accounts: There can be different type of accounts that can be opened e.g Checking, Savings, business
-Transaction type: Payments, transfer, deposit, withdraw
-Transaction menu: Account Holder, Account Number, Select Account, Reference, Amount
-Payment History: Record#, 

-Frontend: React

SQL QUERY:

 -- USERS TABLE STRUCTURE;
 DROP DATABASE demo_bank_v1;
 
 USE demo_bank_v1;
 
 CREATE TABLE users(
 user_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
 first_name VARCHAR(50) NOT NULL,
 last_name VARCHAR(50) NOT NULL,
 email VARCHAR(255) NOT NULL UNIQUE,
 password VARCHAR(255) NOT NULL,
 code INT NULL,
 verified INT DEFAULT 0,
 verified_at DATETIME,
 created_at TIMESTAMP,
 updated_at TIMESTAMP);
 
  -- Bank Account Table
  CREATE TABLE accounts(
  account_id INT NOT NULL auto_increment PRIMARY KEY,
  user_id INT,
  account_number VARCHAR(100) NOT NULL,
  account_name VARCHAR(50) NOT NULL,
  account_type VARCHAR(50) NOT NULL,
  balance DECIMAL(10,2) DEFAULT 0.00,
  created_at TIMESTAMP,
 updated_at TIMESTAMP,
 FOREIGN key(user_id) REFERENCES users(user_id) ON DELETE CASCADE
  );
 
 -- Transaction History Table
 
CREATE TABLE transaction_history(
transaction_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
account_id INT,
transaction_type VARCHAR(50) NOT NULL,
amount DECIMAL(10,2),
source VARCHAR(50)  NULL,
status VARCHAR(50) NULL,  -- success/failed
reason_Code VARCHAR(50) NULL, -- insufficient funds
created_at TIMESTAMP,
FOREIGN key(account_id) REFERENCES accounts(account_id) ON DELETE CASCADE
  );
  
CREATE TABLE payments(
payment_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
account_id INT,
beneficiary VARCHAR(50) NULL,
beneficiary_acct_no VARCHAR(255) NULL,
amount DECIMAL(10,2) NULL,
reference_no VARCHAR(100) NULL,
status VARCHAR(50) NULL,  -- success/failed
reason_Code VARCHAR(50) NULL, -- insufficient funds
created_at TIMESTAMP,
FOREIGN key(account_id) REFERENCES accounts(account_id) ON DELETE CASCADE
);

 -- transaction history views
 CREATE VIEW v_transaction_history AS
 SELECT t.transaction_id, a.account_id, u.user_id,t.transaction_type,t.amount, t.source,t.status,t.reason_code,t.created_at
 FROM transaction_history AS t
 INNER JOIN accounts AS a
 ON  t.account_id = A.account_id
 INNER JOIN users AS u 
 ON a.user_id = u.user_id;
 
 -- Payment history views
 CREATE VIEW v_payments_history AS
 SELECT 
 p.payment_id,
 a.account_id,
 u.user_id,
 p.beneficiary,
 p.beneficiary_acct_no,
 p.amount,
 p.status,
 p.reference_no,
 p.reason_code,
 p.created_at
 
 FROM
 payments as p
 INNER JOIN 
 accounts AS a
 ON
 p.account_id = a.account_id
 INNER JOIN
 users as u
 ON
 a.user_id = u.user_id;
 
 SELECT * from v_transaction_history;
 SELECT * from V_payments_history;
 
 
 




 
 
 
 
